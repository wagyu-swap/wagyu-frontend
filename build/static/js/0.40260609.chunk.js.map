{"version":3,"sources":["hooks/useAllowance.ts","hooks/useApproval.ts","views/Lottery/components/TicketCard/PurchaseWarningModal.tsx","components/TicketInput/TicketInput.tsx","views/Lottery/components/TicketCard/BuyTicketModal.tsx","hooks/useTickets.ts","views/Home/components/CardValue.tsx","views/Home/components/CardVusdtValue.tsx","hooks/useGetLotteryHasDrawn.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","hooks/useTokenBalance.ts","utils/lotteryUtils.ts","hooks/useBuyLottery.ts"],"names":["useLotteryAllowance","useState","BIG_ZERO","allowance","setAllowance","account","useWeb3React","wagyuContract","useWagyu","fastRefresh","useRefresh","useEffect","isSubscribed","a","methods","getLotteryAddress","call","res","BigNumber","fetchAllowance","then","useApproval","onPresentApprove","requestedApproval","setRequestedApproval","onApprove","useLotteryApprove","handleApprove","useCallback","console","error","TicketsList","styled","div","props","theme","colors","primary","WarningModal","onDismiss","t","useTranslation","title","width","onClick","StyledSpacer","spacing","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TicketInput","max","symbol","availableSymbol","onChange","onSelectMax","value","alignItems","type","inputMode","min","placeholder","scale","num","toLocaleString","Tips","BuyTicketModal","amount","val","setVal","pendingTx","setPendingTx","setRequestedBuy","fullBalance","useMemo","getBalanceNumber","maxTickets","parseInt","getFullDisplayBalance","LOTTERY_TICKET_PRICE","onMultiBuy","useMultiBuyLottery","maxNumber","useMaxNumber","handleBuy","length","numbers","Array","apply","map","Math","floor","random","toString","handleSelectMax","Number","LOTTERY_MAX_NUMBER_OF_TICKETS","e","currentTarget","validity","valid","Announce","Final","ModalActions","variant","id","disabled","isInteger","useTotalRewards","rewards","setRewards","lotteryContract","useLottery","getTotalRewards","fetchBalance","useTotalClaim","claimAmount","setClaimAmount","claimLoading","setClaimLoading","ticketsContract","useLotteryTicket","useLastUpdated","lastUpdated","setLastUpdated","getTotalClaim","claim","useWinningNumbers","winningNumbers","setWinningNumbers","getWinningNumbers","useMatchingRewardLength","matchingNumbers","setMatchingNumbers","getMatchingRewardLength","matchedNumbers","useTickets","lotteryNumber","tickets","setTickets","getTickets","CardValue","decimals","fontSize","lineHeight","prefix","bold","color","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","style","CardVusdtValue","useGetLotteryHasDrawn","lotteryHasDrawn","setLotteryHasDrawn","getLotteryStatus","state","fetchLotteryStatus","size","Spacer","s","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","children","l","React","Children","toArray","child","i","FetchStatus","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","getWagyuContract","supply","fetchTotalSupply","useWagyuPerBlock","wagyuPerBlock","setWagyuPerBlock","masterChefContract","getMasterchefContract","fetchWagyuPerBlock","useBurnedBalance","tokenAddress","balance","setBalance","web3","useWeb3","contract","getVls20Contract","balanceOf","useTokenBalance","NOT_FETCHED","SUCCESS","FAILED","fetchStatus","balanceState","setBalanceState","prev","multiCall","abi","calls","getWeb3NoAccount","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","newCalls","slice","calldata","toLowerCase","encodeFunctionData","aggregate","returnData","concat","index","decodeFunctionResult","multiBuy","price","numbersList","times","DEFAULT_TOKEN_DECIMAL","send","from","on","tx","transactionHash","customLotteryNum","issueIndex","getTicketsAmount","calls1","options","address","ticketAbi","tokenIds","calls2","ticketIssues","finalTokenids","forEach","ticketIssue","eq","push","calls3","multiClaim","claimedStatus","unClaimedIds","filter","lotteryAbi","finalTokenIds","r","drawed","calls4","reduce","p","c","sum","getMax","getLotteryIssueIndex","matchNumber","historyAmount","toNumber","historyNumbers","useMultiClaimLottery","lotteryTicketContract","onMultiClaim","txHash","setMax","fetchMax"],"mappings":"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","file":"static/js/0.40260609.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { getLotteryAddress } from 'utils/addressHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useWagyu } from './useContract'\r\nimport useRefresh from './useRefresh'\r\n\r\n// Retrieve lottery allowance\r\nexport const useLotteryAllowance = () => {\r\n  const [allowance, setAllowance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const wagyuContract = useWagyu()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    let isSubscribed = true\r\n    const fetchAllowance = async () => {\r\n      const res = await wagyuContract.methods.allowance(account, getLotteryAddress()).call()\r\n      if (isSubscribed) {\r\n        setAllowance(new BigNumber(res))\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllowance().then()\r\n    }\r\n    return() => {\r\n      isSubscribed = false\r\n    }\r\n  }, [account, wagyuContract, fastRefresh])\r\n\r\n  return allowance\r\n}\r\n\r\n// Retrieve IFO allowance\r\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any): BigNumber => {\r\n  const { account } = useWeb3React()\r\n  const [allowance, setAllowance] = useState(BIG_ZERO)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      try {\r\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\r\n        setAllowance(new BigNumber(res))\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetch().then()\r\n    }\r\n  }, [account, spenderAddress, tokenContract, dependency])\r\n\r\n  return allowance\r\n}\r\n","import { useCallback, useState } from 'react'\r\nimport { useLotteryApprove } from './useApprove'\r\n\r\nexport const useApproval = (onPresentApprove: () => void) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { onApprove } = useLotteryApprove()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      const txHash = await onApprove()\r\n      // user rejected tx or didn't go thru\r\n      if (!txHash) {\r\n        setRequestedApproval(false)\r\n      }\r\n      onPresentApprove()\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, onPresentApprove])\r\n\r\n  return { handleApprove, requestedApproval }\r\n}\r\n\r\nexport default useApproval\r\n","import React from 'react'\nimport { Button, Modal } from '@wagyu-swap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\nconst WarningModal: React.FC<{ onDismiss?: () => void }> = ({ onDismiss }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Modal title={t('Warning')} onDismiss={onDismiss}>\n      <TicketsList>\n        {t('Lottery ticket purchases are final.')}\n        <br />\n        {t('Your WAGYU will not be returned to you after you spend it to buy tickets.')}\n        <br />\n        {t('Tickets are only valid for one lottery draw, and will be burned after the draw.')}\n        <br />\n        {t(\n          'Buying tickets does not guarantee you will win anything. Please only participate once you understand the risks.',\n        )}\n      </TicketsList>\n      <ModalActions>\n        <Button width=\"100%\" onClick={onDismiss}>\n          {t('I understand')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nconst TicketsList = styled.div`\n  text-align: left;\n  overflow-y: auto;\n  max-height: 400px;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nexport default WarningModal\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Flex, Input, InputProps } from '@wagyu-swap-libs/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string\r\n  symbol: string\r\n  availableSymbol: string\r\n  value: string\r\n  onSelectMax?: () => void\r\n  onChange: (evt: React.FormEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst TicketInput: React.FC<TokenInputProps> = ({ max, symbol, availableSymbol, onChange, onSelectMax, value }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <>\r\n      <Flex alignItems=\"center\">\r\n        <Input type=\"number\" inputMode=\"numeric\" min=\"0\" onChange={onChange} placeholder=\"0\" value={value} />\r\n        <StyledTokenAdornmentWrapper>\r\n          <StyledSpacer />\r\n          <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\r\n          <StyledSpacer />\r\n          <Button scale=\"sm\" onClick={onSelectMax}>\r\n            {t('Max')}\r\n          </Button>\r\n        </StyledTokenAdornmentWrapper>\r\n      </Flex>\r\n      <StyledMaxText>\r\n        {t('%num% %symbol% Available', { num: max.toLocaleString(), symbol: availableSymbol })}\r\n      </StyledMaxText>\r\n    </>\r\n  )\r\n}\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst StyledTokenSymbol = styled.span`\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-weight: 700;\r\n`\r\n\r\nexport default TicketInput\r\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Modal } from '@wagyu-swap-libs/uikit'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport TicketInput from 'components/TicketInput'\nimport ModalActions from 'components/ModalActions'\nimport { useMultiBuyLottery, useMaxNumber } from 'hooks/useBuyLottery'\nimport { useTranslation } from 'contexts/Localization'\nimport { LOTTERY_MAX_NUMBER_OF_TICKETS, LOTTERY_TICKET_PRICE } from 'config'\n\ninterface BuyTicketModalProps {\n  max: BigNumber\n  onDismiss?: () => void\n}\n\nconst BuyTicketModal: React.FC<BuyTicketModalProps> = ({ max, onDismiss }) => {\n  const [val, setVal] = useState('1')\n  const [pendingTx, setPendingTx] = useState(false)\n  const [, setRequestedBuy] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getBalanceNumber(max)\n  }, [max])\n\n  const maxTickets = useMemo(() => {\n    return parseInt(getFullDisplayBalance(max.div(LOTTERY_TICKET_PRICE)), 10)\n  }, [max])\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\n    if (e.currentTarget.validity.valid) {\n      setVal(e.currentTarget.value)\n    }\n  }\n\n  const { onMultiBuy } = useMultiBuyLottery()\n  const maxNumber = useMaxNumber()\n  const handleBuy = useCallback(async () => {\n    try {\n      setRequestedBuy(true)\n      const length = parseInt(val)\n      // @ts-ignore\n      // eslint-disable-next-line prefer-spread\n      const numbers = Array.apply(null, { length }).map(() => [\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n      ])\n      const txHash = await onMultiBuy(LOTTERY_TICKET_PRICE.toString(), numbers)\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedBuy(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onMultiBuy, setRequestedBuy, maxNumber, val])\n\n  const handleSelectMax = useCallback(() => {\n    if (Number(maxTickets) > LOTTERY_MAX_NUMBER_OF_TICKETS) {\n      setVal(LOTTERY_MAX_NUMBER_OF_TICKETS.toString())\n    } else {\n      setVal(maxTickets.toString())\n    }\n  }, [maxTickets])\n\n  const wagyuCosts = (amount: string): number => {\n    return +amount * LOTTERY_TICKET_PRICE\n  }\n  return (\n    <Modal title={t('Enter amount of tickets to buy')} onDismiss={onDismiss}>\n      <TicketInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol=\"TICKET\"\n        availableSymbol=\"WAGYU\"\n      />\n      <div>\n        <Tips>{t(`1 Ticket = ${LOTTERY_TICKET_PRICE} WAGYU`, { num: LOTTERY_TICKET_PRICE })}</Tips>\n      </div>\n      <div>\n        <Announce>\n          {t(\n            'Ticket purchases are final. Your WAGYU cannot be returned to you after buying tickets.',\n          )}\n        </Announce>\n        <Final>{t(`You will spend: ${wagyuCosts(val)} WAGYU`)}</Final>\n      </div>\n      <ModalActions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          id=\"lottery-buy-complete\"\n          width=\"100%\"\n          disabled={\n            pendingTx ||\n            !Number.isInteger(parseInt(val)) ||\n            parseInt(val) > Number(maxTickets) ||\n            parseInt(val) > LOTTERY_MAX_NUMBER_OF_TICKETS ||\n            parseInt(val) < 1\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            await handleBuy()\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default BuyTicketModal\n\nconst Tips = styled.div`\n  margin-left: 0.4em;\n  font-size: 14px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst Final = styled.div`\n  margin-top: 1em;\n  text-align: center;\n  font-size: 20px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\nconst Announce = styled.div`\n  margin-top: 1em;\n  margin-left: 0.4em;\n  color: #ed4b9e;\n`\n","import { useCallback, useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useRefresh from './useRefresh'\r\nimport {\r\n  getTotalRewards,\r\n  getTotalClaim,\r\n  getMatchingRewardLength,\r\n  getWinningNumbers,\r\n  getTickets,\r\n} from '../utils/lotteryUtils'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\nconst useTickets = (lotteryNumber = null) => {\r\n  const [tickets, setTickets] = useState([])\r\n  const { account } = useWeb3React()\r\n  const ticketsContract = useLotteryTicket()\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    let isSubscribed = true\r\n    const fetchBalance = async () => {\r\n      const res = await getTickets(lotteryContract, ticketsContract, account, lotteryNumber)\r\n      if (isSubscribed) {\r\n        setTickets(res)\r\n      }\r\n    }\r\n    if (account && lotteryContract && ticketsContract) {\r\n      fetchBalance().then()\r\n    }\r\n    return() => {\r\n      isSubscribed = false\r\n    }\r\n  }, [account, lotteryContract, ticketsContract, fastRefresh, lotteryNumber])\r\n\r\n  return tickets\r\n}\r\n\r\nexport const useTotalRewards = () => {\r\n  const [rewards, setRewards] = useState(BIG_ZERO)\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    let isSubscribed = true\r\n    const fetchBalance = async () => {\r\n      const res = await getTotalRewards(lotteryContract)\r\n      if (isSubscribed) {\r\n        setRewards(new BigNumber(res))\r\n      }\r\n    }\r\n\r\n    if (lotteryContract) {\r\n      fetchBalance().then()\r\n    }\r\n\r\n    return() => {\r\n      isSubscribed = false;\r\n    }\r\n  }, [lotteryContract, fastRefresh])\r\n\r\n  return rewards\r\n}\r\n\r\nexport const useTotalClaim = () => {\r\n  const [claimAmount, setClaimAmount] = useState(BIG_ZERO)\r\n  const [claimLoading, setClaimLoading] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const ticketsContract = useLotteryTicket()\r\n  const lotteryContract = useLottery()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n\r\n  useEffect(() => {\r\n    let isSubscribed = true\r\n    const fetchBalance = async () => {\r\n      if (isSubscribed) {\r\n        setClaimLoading(true)\r\n      }\r\n      const claim = await getTotalClaim(lotteryContract, ticketsContract, account)\r\n      if (isSubscribed) {\r\n        setClaimAmount(claim)\r\n        setClaimLoading(false)\r\n      }\r\n      return() => {\r\n        isSubscribed = false;\r\n      }\r\n    };\r\n    if (account && lotteryContract && ticketsContract) {\r\n      fetchBalance().then()\r\n    }\r\n    return() => {\r\n      isSubscribed = false;\r\n    }\r\n  }, [account, lotteryContract, ticketsContract, lastUpdated])\r\n\r\n  return { claimLoading, claimAmount, setLastUpdated }\r\n}\r\n\r\nexport const useWinningNumbers = () => {\r\n  const [winningNumbers, setWinningNumbers] = useState([0, 0, 0, 0])\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    let isSubscribed = true\r\n    const fetchBalance = async () => {\r\n      const rewards = await getWinningNumbers(lotteryContract)\r\n      if (isSubscribed) {\r\n        setWinningNumbers(rewards)\r\n      }\r\n    }\r\n    if (lotteryContract) {\r\n      fetchBalance().then()\r\n    }\r\n    return() => {\r\n      isSubscribed = false\r\n    }\r\n  }, [fastRefresh, lotteryContract, setWinningNumbers])\r\n\r\n  return winningNumbers\r\n}\r\n\r\nexport const useMatchingRewardLength = (numbers) => {\r\n  const [matchingNumbers, setMatchingNumbers] = useState(0)\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    let isSubscribed = true\r\n    const fetchBalance = async () => {\r\n      const matchedNumbers = await getMatchingRewardLength(lotteryContract, numbers)\r\n      if (isSubscribed) {\r\n        setMatchingNumbers(matchedNumbers)\r\n      }\r\n    }\r\n\r\n    if (lotteryContract) {\r\n      fetchBalance().then()\r\n    }\r\n    return() => {\r\n      isSubscribed = false\r\n    }\r\n  }, [lotteryContract, numbers, fastRefresh])\r\n\r\n  return matchingNumbers\r\n}\r\n\r\nexport default useTickets\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@wagyu-swap-libs/uikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport CardValue, { CardValueProps } from './CardValue'\r\n\r\nconst CardVusdtValue: React.FC<CardValueProps> = (props) => {\r\n  return (\r\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\r\n  )\r\n}\r\n\r\nexport default CardVusdtValue\r\n","import { useEffect, useState } from 'react'\r\nimport { useLottery } from 'hooks/useContract'\r\nimport { getLotteryStatus } from 'utils/lotteryUtils'\r\n\r\n/**\r\n * Returns whether or not the current lottery has drawn numbers\r\n *\r\n * @return {Boolean}\r\n */\r\nconst useGetLotteryHasDrawn = () => {\r\n  const [lotteryHasDrawn, setLotteryHasDrawn] = useState(true)\r\n  const lotteryContract = useLottery()\r\n\r\n  useEffect(() => {\r\n    let isSubscribed = true\r\n    if (lotteryContract) {\r\n      const fetchLotteryStatus = async () => {\r\n        const state = await getLotteryStatus(lotteryContract)\r\n        if (isSubscribed) {\r\n          setLotteryHasDrawn(state)\r\n        }\r\n      }\r\n      fetchLotteryStatus().then()\r\n    }\r\n    return() => {\r\n      isSubscribed = false;\r\n    }\r\n  }, [lotteryContract])\r\n\r\n  return lotteryHasDrawn\r\n}\r\n\r\nexport default useGetLotteryHasDrawn\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getMasterchefContract, getVls20Contract, getWagyuContract } from 'utils/contractHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useWeb3 from './useWeb3'\r\nimport useRefresh from './useRefresh'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\ntype UseTokenBalanceState = {\r\n  balance: BigNumber\r\n  fetchStatus: FetchStatus\r\n}\r\n\r\nexport enum FetchStatus {\r\n  NOT_FETCHED = 'not-fetched',\r\n  SUCCESS = 'success',\r\n  FAILED = 'failed',\r\n}\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\r\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\r\n    balance: BIG_ZERO,\r\n    fetchStatus: NOT_FETCHED,\r\n  })\r\n  const web3 = useWeb3()\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getVls20Contract(tokenAddress, web3)\r\n      try {\r\n        const res = await contract.methods.balanceOf(account).call()\r\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\r\n      } catch (e) {\r\n        console.error(e)\r\n        setBalanceState((prev) => ({\r\n          ...prev,\r\n          fetchStatus: FAILED,\r\n        }))\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance().then()\r\n    }\r\n  }, [account, tokenAddress, web3, fastRefresh, SUCCESS, FAILED])\r\n\r\n  return balanceState\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const wagyuContract = getWagyuContract()\r\n      const supply = await wagyuContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply().then()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useWagyuPerBlock = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [wagyuPerBlock, setWagyuPerBlock] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchWagyuPerBlock() {\r\n      const masterChefContract = getMasterchefContract()\r\n      const amount= await masterChefContract.methods.wagyuPerBlock().call()\r\n      setWagyuPerBlock(new BigNumber(amount))\r\n    }\r\n\r\n    fetchWagyuPerBlock().then()\r\n  }, [slowRefresh])\r\n\r\n  return wagyuPerBlock\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { slowRefresh } = useRefresh()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getVls20Contract(tokenAddress, web3)\r\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    fetchBalance().then()\r\n  }, [web3, tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useGetVlxBalance = () => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const walletBalance = await web3.eth.getBalance(account)\r\n      setBalance(new BigNumber(walletBalance))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance().then()\r\n    }\r\n  }, [account, web3, lastUpdated, setBalance])\r\n\r\n  return { balance, refresh: setLastUpdated }\r\n}\r\n\r\nexport default useTokenBalance\r\n","/* eslint-disable no-await-in-loop */\r\nimport BigNumber from 'bignumber.js'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3NoAccount } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport ticketAbi from 'config/abi/lotteryNft.json'\r\nimport lotteryAbi from 'config/abi/lottery.json'\r\nimport { DEFAULT_TOKEN_DECIMAL, LOTTERY_TICKET_PRICE } from 'config'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { getMulticallAddress } from './addressHelpers'\r\nimport { BIG_ZERO } from './bigNumber'\r\n\r\nexport const multiCall = async (abi, calls) => {\r\n  const web3 = getWeb3NoAccount()\r\n  const multi = new web3.eth.Contract(MultiCallAbi as unknown as AbiItem, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n  let res = []\r\n  if (calls.length > 100) {\r\n    let i = 0\r\n    while (i < calls.length / 100) {\r\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\r\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\r\n      const { returnData } = await multi.methods.aggregate(calldata).call()\r\n      i++\r\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\r\n    }\r\n  } else {\r\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\r\n    const { returnData } = await multi.methods.aggregate(calldata).call()\r\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\r\n  }\r\n  return res\r\n}\r\n\r\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\r\n  try {\r\n    return lotteryContract.methods\r\n      .multiBuy(new BigNumber(price).times(DEFAULT_TOKEN_DECIMAL).toString(), numbersList)\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  } catch (err) {\r\n    return console.error(err)\r\n  }\r\n}\r\n\r\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\r\n  const issueIndex = customLotteryNum || (await lotteryContract.methods.issueIndex().call())\r\n  const length = await getTicketsAmount(ticketsContract, account)\r\n\r\n  // eslint-disable-next-line prefer-spread\r\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\r\n    ticketsContract.options.address,\r\n    'tokenOfOwnerByIndex',\r\n    [account, i],\r\n  ])\r\n  const res = await multiCall(ticketAbi, calls1)\r\n\r\n  const tokenIds = res.map((id) => id.toString())\r\n\r\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\r\n  const ticketIssues = await multiCall(ticketAbi, calls2)\r\n\r\n  const finalTokenids = []\r\n  ticketIssues.forEach(async (ticketIssue, i) => {\r\n    if (new BigNumber(ticketIssue).eq(issueIndex)) {\r\n      finalTokenids.push(tokenIds[i])\r\n    }\r\n  })\r\n  const calls3 = finalTokenids.map((id) => [ticketsContract.options.address, 'getLotteryNumbers', [id]])\r\n  const tickets = await multiCall(ticketAbi, calls3)\r\n\r\n  await getLotteryStatus(lotteryContract)\r\n  return tickets\r\n}\r\n\r\nexport const getTicketsAmount = async (ticketsContract, account) => {\r\n  return ticketsContract.methods.balanceOf(account).call()\r\n}\r\n\r\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\r\n  await lotteryContract.methods.issueIndex().call()\r\n  const length = await getTicketsAmount(ticketsContract, account)\r\n  // eslint-disable-next-line prefer-spread\r\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\r\n    ticketsContract.options.address,\r\n    'tokenOfOwnerByIndex',\r\n    [account, i],\r\n  ])\r\n  const res = await multiCall(ticketAbi, calls1)\r\n  const tokenIds = res.map((id) => id.toString())\r\n\r\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\r\n  const claimedStatus = await multiCall(ticketAbi, calls2)\r\n\r\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\r\n\r\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\r\n  const rewards = await multiCall(lotteryAbi, calls3)\r\n\r\n  let finalTokenIds = []\r\n  rewards.forEach((r, i) => {\r\n    if (r > 0) {\r\n      finalTokenIds.push(unClaimedIds[i])\r\n    }\r\n  })\r\n\r\n  if (finalTokenIds.length > 200) {\r\n    finalTokenIds = finalTokenIds.slice(0, 200)\r\n  }\r\n\r\n  try {\r\n    return lotteryContract.methods\r\n      .multiClaim(finalTokenIds)\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  } catch (err) {\r\n    return console.error(err)\r\n  }\r\n}\r\n\r\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\r\n  try {\r\n    const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n    const length = await getTicketsAmount(ticketsContract, account)\r\n    // eslint-disable-next-line prefer-spread\r\n    const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\r\n      ticketsContract.options.address,\r\n      'tokenOfOwnerByIndex',\r\n      [account, i],\r\n    ])\r\n    const res = await multiCall(ticketAbi, calls1)\r\n    const tokenIds = res.map((id) => id.toString())\r\n    const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\r\n    const ticketIssues = await multiCall(ticketAbi, calls2)\r\n    const calls3 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\r\n    const claimedStatus = await multiCall(ticketAbi, calls3)\r\n\r\n    const drawed = await getLotteryStatus(lotteryContract)\r\n\r\n    const finalTokenIds = []\r\n    ticketIssues.forEach(async (ticketIssue, i) => {\r\n      // eslint-disable-next-line no-empty\r\n      if (!drawed && ticketIssue.toString() === issueIndex) {\r\n      } else if (!claimedStatus[i][0]) {\r\n        finalTokenIds.push(tokenIds[i])\r\n      }\r\n    })\r\n\r\n    const calls4 = finalTokenIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\r\n\r\n    const rewards = await multiCall(lotteryAbi, calls4)\r\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), BIG_ZERO)\r\n\r\n    return claim\r\n  } catch (err) {\r\n    // console.error(err)\r\n  }\r\n  return BIG_ZERO\r\n}\r\n\r\nexport const getTotalRewards = async (lotteryContract) => {\r\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  return lotteryContract.methods.getTotalRewards(issueIndex).call()\r\n}\r\n\r\nexport const getMax = async (lotteryContract) => {\r\n  return lotteryContract.methods.maxNumber().call()\r\n}\r\n\r\nexport const getLotteryIssueIndex = async (lotteryContract) => {\r\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  return issueIndex\r\n}\r\n\r\nexport const getLotteryStatus = async (lotteryContract) => {\r\n  return lotteryContract.methods.drawed().call()\r\n}\r\n\r\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\r\n  let issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  const drawed = await lotteryContract.methods.drawed().call()\r\n  if (!drawed) {\r\n    issueIndex -= 1\r\n  }\r\n  try {\r\n    const amount = await lotteryContract.methods.historyAmount(issueIndex, 5 - matchNumber).call()\r\n\r\n    return new BigNumber(amount).div(DEFAULT_TOKEN_DECIMAL).div(LOTTERY_TICKET_PRICE).toNumber()\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n  return 0\r\n}\r\n\r\nexport const getWinningNumbers = async (lotteryContract) => {\r\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  const numbers = []\r\n  const drawed = await lotteryContract.methods.drawed().call()\r\n\r\n  if (!drawed && parseInt(issueIndex, 10) === 0) {\r\n    return [0, 0, 0, 0]\r\n  }\r\n  if (!drawed) {\r\n    for (let i = 0; i < 4; i++) {\r\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIndex - 1, i).call()).toString())\r\n    }\r\n  } else {\r\n    for (let i = 0; i < 4; i++) {\r\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString())\r\n    }\r\n  }\r\n  return numbers\r\n}\r\n","import { useCallback, useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\r\nimport { multiClaim, getMax, multiBuy } from '../utils/lotteryUtils'\r\n\r\nexport const useMultiClaimLottery = () => {\r\n  const { account } = useWeb3React()\r\n  const lotteryContract = useLottery()\r\n  const lotteryTicketContract = useLotteryTicket()\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    try {\r\n      const txHash = await multiClaim(lotteryContract, lotteryTicketContract, account)\r\n      return txHash\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, lotteryContract, lotteryTicketContract])\r\n\r\n  return { onMultiClaim: handleClaim }\r\n}\r\n\r\nexport const useMultiBuyLottery = () => {\r\n  const { account } = useWeb3React()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleBuy = useCallback(\r\n    async (amount: string, numbers: Array<any>) => {\r\n      try {\r\n        const txHash = await multiBuy(lotteryContract, amount, numbers, account)\r\n        return txHash\r\n      } catch (e) {\r\n        return false\r\n      }\r\n    },\r\n    [account, lotteryContract],\r\n  )\r\n\r\n  return { onMultiBuy: handleBuy }\r\n}\r\n\r\nexport const useMaxNumber = () => {\r\n  const [max, setMax] = useState(5)\r\n  const lotteryContract = useLottery()\r\n\r\n  const fetchMax = useCallback(async () => {\r\n    const maxNumber = await getMax(lotteryContract)\r\n    setMax(maxNumber)\r\n  }, [lotteryContract])\r\n\r\n  useEffect(() => {\r\n    if (lotteryContract) {\r\n      fetchMax().then()\r\n    }\r\n  }, [lotteryContract, fetchMax])\r\n\r\n  return max\r\n}\r\n"],"sourceRoot":""}
